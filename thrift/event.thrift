namespace * ophan.thrift.event
namespace cocoa GLAOphanThriftEvent

include "ua.thrift"
include "ads.thrift"
include "quiz.thrift"
include "interaction.thrift"
include "referrer.thrift"
include "url.thrift"
include "link.thrift"
include "platform.thrift"
include "abtest.thrift"
include "media.thrift"
include "geo.thrift"
include "ipv6.thrift"
include "subscription.thrift"
include "acquisition.thrift"
include "componentevent.thrift"

/** Ophan assigns various ids to things when necessary
 * (on Web, by dropping cookies). This struct indicates
 * the id and
 * whether we freshly assigned an id on this request.
 */
struct AssignedId {

    /** The actual id */
    1: required string id

    /**Whether the id was generated and set for the
     * first time on this request. If undefined,
     * it's not known whether the id is a new one
     * or not.
     */
    2: optional bool isNew
}


struct Tag {
    1: required string id

    2: required string type

    3: optional string sectionId

    4: optional string sectionName

    5: optional string webTitle

    6: optional string webUrl
}



/*
 *  Information about the platform used to consume a podcast
 */
struct PodcastPlatform {

    1: required string name

    2: optional string version

    /*
     * Whether this podcast was consumed by a web browser or by a native app
     */
    3: optional bool isBrowser
}

/*
 *  Additional information for pageviews that refer to a podcast
 */
struct Podcast {
    /*
     * The episode for this podcast, as the CAPI path of the page that hosts it.
     */
    1: required string episodeId

    /*
     * The podcast series (e.g. Football Weekly), as the CAPI path of the page that hosts it.
     */
    2: required string podcastId

    3: optional PodcastPlatform platform
}

/**
* Details about the page that was served to the user
**/
struct Page {

    /** Url of the page served
     */
    1: required url.Url url

    /** The values of all of the CMP and INTCMP parameters  */
    4: optional set<string> campaignCodes

    /**
    * The platform that served this page.
    * Marked as optional because when new platforms are added and your thrift definition hasn't been
    * updated, this will become empty.
    * **/
    5: optional platform.Platform platform

    /**
    * The section id of the page.
    *
    * Network front pages (e.g. "/uk") are assigned to a section named "/" (a single slash).
    *
    * Note this is currently extracted from the url, though in the future more advanced
    * techiniques may be used to caluclate this data.
    *
    * Will always be undefined for non www.theguardian.com urls.
    **/
    6: optional string section

    /**
    * For most content pages, the publication date of the content, in ISO date format "YYYY-MM-DD"
    * e.g. 2014-01-20
    *
    * Note this is currently extracted from the url, though in the future more advanced
    * techiniques may be used to calculate this data.
    *
    * Fronts will never have a publication date.
    *
    **/
    7: optional string publicationDate


    /**
    * Returns some approximation of the content type, generated by the serving platform.
    *
    * Currently, next-gen produces a maximum of one entry whereas R2 generates a number of varying entries.
    * Native mobile apps produce nothing. There is little consistency between the strings that the
    * platforms report.
    *
    * As a result, you are strongly advised not to make use of this field unless you have a really
    * good reason to do so. It will likely be removed at some point in the future.
    **/
    8: optional set<string> contentTypes


    /**
    * The set of component names that were rendered on this page. Currently only reported by next-gen,
    * this can be used to validate the effectiveness of particular components.
    **/
    9: optional set<string> renderedComponents

    /**
    * The set of tags that were rendered on this page.
    * This field is being tracked from June 2016.
    **/
    10: optional set<Tag> tags

    /**
    * Additional information for pageviews that refer to a podcast
    **/
    11: optional Podcast podcast

    /**
    * Experience contains information about the rendering of the page.
    * It may contain multiple comma-seperated experiences.
    **/
    12: optional set<string> experiences
}


enum SuspectStatus {

    /** This event is valid and should be processed normally */
    VALID = 0

    /** This event is invalid, becuase we think it was only sent because
     * of a persistent bug in the mobile apps where they erroneously
     * sent page view notifcation after a device suspend-resume
     */
    INVALID_APP_RESUME_BUG = 1

    /**
    * This event does not represent a usual page view, as the user was returned
    * a non-200 sucess code. (Which we track by putting special ophan tracking on
    * the error page displayed.)
    *
    * Unless you're specifically interested in errors, you should ignore these as
    * page views.
    **/
    INVALID_WEB_NOT_SUCCESSFUL = 3


    /**
    * This event was generated by robotic requests.
    *
    * Unless you're specifically interested in understanding javascript-enabled
    * robotic traffic, you should ignore these as page views.
    **/
    INVALID_ROBOT = 4

    /**
    * This event was generated by display of a guardian media asset embedded on a
    * third party site.
    *
    * Unless you're specifically interested in understanding third party embed,
    * you should ignore these as page views.
    **/
    INVALID_THIRD_PARTY_EMBED = 5

    /**
    * This event appears to have been generated by a user inside the Guardian network.
    *
    * Unless you're specifically interested in underestanding the behaviour of users
    * inside the Guardian networks, you should ignore these as page views.
    **/
    INVALID_INTERNAL_GUARDIAN_TRAFFIC = 6

    /**
    * The event goes to an url that has been blocked because we suspect it is the persistent target of bots, which
    * skews the analytics
    **/
    INVALID_BLOCKED_URL = 7
}


/**
 * Details about a page view - only populated for _PAGE_VIEW
 * event types
 **/
struct PageView {

    /** Whether we view this event as "suspect".
     * most consumers of this stream should ignore events
     * that are do not have a status of VALID.
     */
    1: optional SuspectStatus validity = SuspectStatus.VALID

    /** Details about the page displayed */
    2: required Page page

    /** The user agent that made this request */
    3: optional ua.UserAgent userAgent

    /** Details about the location of the user made this request */
    4: optional geo.GeoLocation location

    /** IP details of the user who made this request **/
    7: optional geo.IpAddress ipAddress

    /** Details about the referrer to this page view
     *  Will only be present on _PAGE_VIEW events where
     *  a referer was received   */
    5: optional referrer.Referrer referrer

    /** The http status returned to the user for this page view */
    6: required i16 httpStatus = 200

    /**
    * The number of days in the previous week that the device has had a page view
    * recorded on the Guardian
    **/
    8: optional i32 daysVisitedInLastWeek

    /**
    * Total number of days on which this browser has visited the guardian,
    * ever. (Or, at least, since the slab's records began, which is since
    * June 2015.)
    *
    * Includes "today" so this number should never be less than 1.
    *
    * This field is accurately populated starting from 2016-06-09
    **/
    9: optional i32 totalDaysVisited


    /**
    * Calculated average days between recent visits.
    *
    * Note, this is actually calculated in a way to make discount older visits:
    *
    * min(56, daysSinceFirstVisit + 1) / daysVisitedInLast56days
    *
    * This field is accurately populated starting from 2016-06-09
    **/
    10: optional double averageDaysBetweenRecentVisits

    /**
    * Is this browser a regular visitor to the Guardian?
    *
    * i.e. totalDaysVisited >= 8 && averageDaysBetweenRecentVisits <= 7
    **/
    11: optional bool regular

    12: optional subscription.SubscriptionType subscriptionType

    13: optional subscription.MembershipTier membershipTier
}


struct AttentionTime {
  /**
  * Attention time spent on this page view (indicated by event.pageViewId)
  * in milliseconds.
  **/
  1: required i64 attentionMs

  /**
  * Map of component name to time in ms
  * when attention time rules are true and the component is visible
  **/
  2: optional map<string, i64> componentAttention
}


struct AdInfo {
  /**
  * If present, indicates that we have detected the presence or absence of
  * ad blocking technology.
  *
  * If absent, this check was not performed. If we have previously sent an event
  * with this field present, you should treat that value as still valid.
  *
  * (Currently, the check is only performed on initial page load, so this field
  * will only ever be set in the event relating to the initial page view not on
  * subsequent events relating to that page view.)
  **/
  1: optional bool adBlockerDetected

  /**
  * Details of one or more ads rendered. Currently, each ad rendering is sent to
  * ophan in a separate event so there will only ever be one entry in this list.
  * This is likely to change in the future, however.
  **/
  2: optional list<ads.RenderedAd> ads

  /**
  * This is a list of custom segments assigned to this user.
  * Typically they will come from krux.
  * Populated in the slab via dynamodb.
  **/
  3: optional list<string> customSegments
}

/**
* Asset performance data, e.g. JavaScript
**/
struct AssetPerformanceData {
  /**
  * The name of the metric being captured
  **/
  1: required string name

  /**
  * Value of window.performance.now at which metric was captured
  **/
  2: required i64 timing
}

/**
* Web performance data as captured from the browser performance timing api.
* In the descriptions below, "t" represents window.performance.timing
**/
struct WebPerformanceData {

  /**
  * Time in ms that dns lookup took.
  * Calculated by t.domainLookupEnd - t.domainLookupStart
  **/
  1: required i64 dns

  /**
  * Time in ms that connection to the server took.
  * Calculated by t.connectEnd - t.connectStart
  **/
  2: required i64 connection

  /**
  * Time to first byte
  * Calculated by t.responseStart - t.connectEnd
  **/
  3: required i64 firstByte

  /**
  * First byte to last byte, or closed, including if from cache.
  * Calculated by t.responseEnd - t.responseStart
  **/
  4: required i64 lastByte

  /**
  * From last byte of doc to start of domContentLoaded
  * Calculated by t.domContentLoadedEventStart - t.responseEnd
  **/
  5: required i64 domContentLoadedEvent

  /**
  * domcontentLoaded to start of load event
  * Calculated by t.loadEventStart - t.domContentLoadedEventStart
**/
  6: required i64 loadEvent

  /**
  * The navigation type
  * Value of window.performance.navigation.type
  **/
  7: required i64 navType

  /**
  * Number of redirects on current domain.
  * Value of window.performance.navigation.redirectCount
  **/
  8: required i64 redirectCount

  /**
  * List of key-value pairs representing custom Asset performance data,
  * e.g. time at which JavaScript begins / finishes executing
  **/
  9: optional list<AssetPerformanceData> assetsPerformance

}

struct Component {
  /**
  * The name of this component
  **/
  1: required string name

  /**
  * How long, in milliseconds, that the component took to load.
  * If absent, the component had not completed loading by the time the snapshot of lazy
  * components was taken.
  **/
  2: optional i64 loadTimeMs
}


struct LazyComponents {
  /**
  * The set of components that were loaded lazily on this page.
  * Note: statically loaded components are reported in Page.components
  **/
  1: required set<Component> components
}


struct AltIds {

  /**
  * The omniture user identifier, stored in the s_vi coookie.
  * Note currently this is not available for native app events.
  * It is present on both web initial and web additional events.
  **/
  1: optional string s_vi

  /**
  * The omniture session identifier, stored in the s_sess cookie.
  * Note currently this is not available for native app events.
  * It is present on both web initial and web additional events.
  **/
  2: optional string s_sess

  /**
  * The krux identifer for this user.
  **/
  3: optional string kruxId

  /**
  * The Exact Target email subscriber id.
  * Page Views in response to readers clicking on an email sent by Exact Target
  * include the exact target subscriber id. This field is populated in that case.
  **/
  4: optional string exactTargetSubscriberId
  /**
    * The Amp Page View Id.
    * Generated within AMP and shared with DFP to tie the ad views and page views
    * together.
    **/
   5: optional string ampViewId
}


struct InPageClick {

    /** the component that contained the item clicked on
     */
    1: optional string component

    /**
    * The link name associated with the element clicked.
    */
    2: optional link.LinkName linkName

}


struct Outbrain {
  /** The widget id passed to Outbrain, see https://github.com/guardian/frontend/blob/master/static/src/javascripts/projects/common/modules/commercial/third-party-tags/outbrain.js
   */
  1: string widgetId
}


struct Event {

    /** Gloablly unique id associated with this event. Ophan never makes
     * better than at-least-once delivery promises, so you
     * must ensure that processing two events with the same
     * uniqueEventId has no effect
     */
    2: required string uniqueEventId


    /** The date time (in millis since epoch UTC) at which this event
     * occurred.
     */
    3: required i64 dt

    /**
    * The date time (in millis since epoc UTC) at which this event
    * was received by ophan for processing. For web generated events,
    * this is the same as dt. For native mobile app generated events, it
    * might not be.
    */
    10: required i64 receivedDt


    /** The page view for which this event is associated.
     * Ophan may send multiple events relating to the same
     * page view, which may contain updates to any previously
     * supplied data or new data. You should treat the one with the
     * highest timestamp (dt) as the most accurate.
     */
    4: required string pageViewId


    /** The unqiue id associated with this browser.
     * Currently this is maintained by setting a cookie for web
     * events, or otherwise determined for native apps.
     */
    5: required AssignedId browserId


    /** The unique id associated with this "visit".
     * For web reports, the visit id is a refreshed session
     * cookie that expires after 30 minutes of activity.
     * Mobile apps do not currently set this value.
     */
    6: optional AssignedId visitId


    /**
    * If the user is logged in, the identity user id.
    * **/
    7: optional string userId

    /**
    * Various other identifiers we may have to identify this user.
    **/
    17: optional AltIds altIds


    /**
    *  If populated, this event represents a page view.
    **/
    8: optional PageView pageView

    /**
    * If populated, this event includes attention time data.
    * Note this will also be populated, typically with a value of zero,
    * alongside a pageView value for page views generated by platforms
    * that support attention time tracking.
    **/
    9: optional AttentionTime attention

    /**
    * If populated, this event includes advertising-related information
    **/
    11: optional AdInfo ads

    /**
    * If populated, this event includes web performance load information
    **/
    12: optional WebPerformanceData perf

    /**
    * If populated, this event includes data about media playback
    **/
    13: optional media.MediaPlayback media

    /**
    * If populated, this event includes data about ab tests that the user was a member of
    **/
    14: optional abtest.AbTestInfo ab

    /**
    * If populated, this event includes data about components that were lazily loaded.
    **/
    15: optional LazyComponents lazyComponents

    /**
    * If populated, this event includes data about a quiz event.
    **/
    16: optional quiz.QuizEvent quizEvent

    /**
    * If populated, this event includes data about a click that did not result in a page transition
    **/
    18: optional InPageClick inPageClick

    /**
    * If populated, indicates which Outbrain widget appeared on a page
    **/
    19: optional Outbrain outbrain

    /**
    * If populated, includes data about in-page interactions.
    **/
    20: optional interaction.Interaction interaction

    /**
    * Is this browser in private browsing mode?
    *
    * i.e. incognito mode in Google Chrome = true
    **/
    21: optional bool inPrivateBrowsingMode

    /**
    * If populated, includes data about IPv6 connectivity
    **/
    22: optional ipv6.IpConnectivity ipConnectivity

    /** Acquisition of one of our current
     * products, eg Contribution, Membership, Reccuring Contribution
     */
    23: optional acquisition.Acquisition acquisition

    /**
     * An event relating to a component
     * e.g. a user clicking on the contribution CTA of an Epic component
     * e.g. an Atom component being inserted into a page
     */
    24: optional componentevent.ComponentEvent componentEvent
}
